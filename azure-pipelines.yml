pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: Docker credentials

steps:
  - script: |
      docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    displayName: 'Log into docker registry'
    env:
      DOCKER_USERNAME: $(DOCKER_USERNAME)
      DOCKER_PASSWORD: $(DOCKER_PASSWORD)

  - script: docker pull derex/buildah
    displayName: 'Pull Buildah image'

  - script: |
      pwd
      mkdir .cache/wheels_cache
      docker run --rm --mount type=bind,source=${PWD}/.cache/wheels_cache,target=/dest derex/wheelhouse sh -c "cp -v /wheelhouse/*.whl /dest/; chown $(id -u):$(id -g) /dest/ -R"
    displayName: 'Put wheels cache in place'

  - script: |
      set -ex
      docker run \
        --rm --privileged --security-opt="seccomp=unconfined" \
        --cap-add=ALL \
        -v /var/lib/containers/:/var/lib/containers/:rw,Z \
        -v /var/run/docker.sock:/var/run/docker.sock \
        --mount type=bind,source=${PWD},target=${PWD} \
        derex/buildah \
        bash -c "
          set -ex
          cd ${PWD}
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt
          pip3 install .
          # Sometimes azure has a colon in ${PWD}. Buildah does not like it.
          # Also, Buildah only accepts absolute paths. So we temporarily
          # move wheels_cache to the root.
          cp -r '${PWD}/.cache/wheels_cache' /
          export WHEELS_CACHE=/wheels_cache
          derex.builder resolve derex/openedx/ironwood -v DEBUG
          derex.builder resolve derex/openedx/ironwood-tutor -v DEBUG
          cp /wheels_cache/* '${PWD}/.cache/wheels_cache/' || true"
    displayName: 'Install derex.builder and build images'

  - script: |
      set -ex
      docker run \
        --rm --privileged --security-opt="seccomp=unconfined" \
        --cap-add=ALL \
        -v /var/lib/containers/:/var/lib/containers/:rw,Z \
        --mount type=bind,source=${PWD},target=${PWD} \
        --mount "type=bind,source=$HOME/.docker,target=/root/.docker" \
        derex/buildah \
        bash -c "
          set -ex
          cd ${PWD}
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt
          pip3 install .
          sudo buildah images
          sudo buildah push \$(derex.builder image derex/openedx/ironwood-tutor)
          LATEST_IMAGE=\$(derex.builder image derex/openedx/ironwood-tutor)
          echo '#''#vso[task.setvariable variable=LATEST_IMAGE]'\$LATEST_IMAGE
          echo Made variable LATEST_IMAGE available for the following tasks. Value is \$LATEST_IMAGE"
    displayName: 'Push built docker images'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      architecture: 'x64'

  - script: |
      set -ex
      python -m pip install --upgrade pip
      pip install git+https://github.com/regisb/tutor.git@v3.3.10
      tutor config save --silent \
        --set ACTIVATE_NOTES=false \
        --set ACTIVATE_XQUEUE=false \
        --set ACTIVATE_FORUM=false \
        --set DOCKER_IMAGE_OPENEDX=$LATEST_IMAGE \
        --set LMS_HOST=localhost
      tutor local databases
      docker exec tutor_local_mysql_1 bash -c "echo -e '[mysqldump]\nuser=root\npassword='$(cat $(tutor config printroot)/config.yml |grep MYSQL_ROOT_PASS|awk '{print $2}')>  ~/.my.cnf"
      docker exec tutor_local_mysql_1 mysqldump --all-databases |xz > mysql_dump.xz
      tutor local logs
    displayName: 'Try out the built image using tutor'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'Mysql dump'
      targetPath: 'mysql_dump.xz'

  - script: |
      set -ex
      tutor local importdemocourse
      docker exec tutor_local_mysql_1 mysqldump --all-databases |xz > mysql_dump_demo.xz
    displayName: 'Generate demo database'

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'Mysql demo dump'
      targetPath: 'mysql_dump_demo.xz'

  - script: |
      BEFORE=$(docker run --rm derex/wheelhouse:latest du /wheelhouse -s|cut -f1)
      AFTER=$(du .cache/wheels_cache -s|cut -f1)
      echo Current wheel house image is ${BEFORE} bytes. Now we have ${AFTER} bytes in the wheel cache.
      # Only act if we have at least one more Mb worth of wheels
      if  [ "${AFTER}" -gt "$((${BEFORE}+1000))" ]; then
        echo "${AFTER} is greater than ${BEFORE} plus one thousand";
        docker build .cache -t derex/wheelhouse:latest
        docker push derex/wheelhouse:latest
      fi;
    displayName: 'Build and push wheels image if necessary'
